/*
 * fabio_djamal_ms.cpp
 *
 *  Created on: Oct 13, 2016
 *      Author: denas
 */

#include <iostream>
#include <string>
#include <sdsl/suffix_arrays.hpp>
#include <sdsl/suffix_trees.hpp>
#include <sdsl/wavelet_trees.hpp>
#include <sdsl/bp_support.hpp>
#include <sdsl/csa_wt.hpp>
#include <sdsl/bit_vectors.hpp>

#include "fd_ms.hpp"


using namespace std;
//using namespace sdsl;
using namespace fdms;

Mstat compute_ms(string& T,
                 string& Sfwd, string& Sfwdbp,
                 string& Srev, string& Srevbp,
                 const bool verbose){

    bit_vector bfwd(Sfwdbp.size()), brev(Srevbp.size());
    for(size_type i=0; i<Sfwdbp.size(); i++)
        bfwd[i] = ((unsigned char)Sfwdbp[i] - 48);
    for(size_type i=0; i<Srevbp.size(); i++)
        brev[i] = ((unsigned char)Srevbp[i] - 48);

    fdms::bp_support_sada<> Bpsfwd(&bfwd);
    fdms::bp_support_sada<> Bpsrev(&brev);

    if(verbose){
        cst_sct3<> st_of_s, st_of_s_rev;
        construct_im(st_of_s, Sfwd, 1);
        //construct_im(st_of_s_rev, Srev, 1);

        cout << " i SA ISA PSI LF BWT   T[SA[i]..SA[i]-1]" << endl;
        csXprintf(cout, "%2I %2S %3s %3P %2p %3B   %:3T", st_of_s.csa);
        //cout << " i SA ISA PSI LF BWT   T[SA[i]..SA[i]-1]" << endl;
        //csXprintf(cout, "%2I %2S %3s %3P %2p %3B   %:3T", st_of_s_rev.csa);
    }

    Bwt Bwtfwd(Sfwd);
    /*
    for(size_type i=0; i < Bwtfwd.bwt_len; i++)
        cout << Bwtfwd[i] << endl;

    cout << "rank, 'a': ";
    for(size_type i=0; i <= Bwtfwd.bwt_len; i++)
        cout << (int) Bwtfwd.rank(i, 'a');
    cout << endl << "select, 'a': ";
    for(size_type i=1; i <= Bwtfwd.rank(Bwtfwd.bwt_len, 'a'); i++)
        cout << (int) Bwtfwd.select(i, 'a');
    cout << endl;

    cout << "rank, 'b': ";
    for(size_type i=0; i <= Bwtfwd.bwt_len; i++)
        cout << (int) Bwtfwd.rank(i, 'b');
    cout << endl << "select, 'b': ";
    for(size_type i=1; i <= Bwtfwd.rank(Bwtfwd.bwt_len, 'b'); i++)
        cout << (int) Bwtfwd.select(i, 'b');
    cout << endl;


    for(size_type i=0; i<Bwtfwd.bwt_len; i++){
        cout << "LF(" << i << ") = " << Bwtfwd.lf(i) << endl;
    }

    for(size_type i=0; i<Bwtfwd.bwt_len; i++){
        cout << "LF^-1(" << i << ") = " << Bwtfwd.lf_rev(i) << endl;
    }

    for(size_type i=0; i<Bwtfwd.bwt_len; i++){
        cout << "LF(LF^-1(" << i << ")) = " << Bwtfwd.lf(Bwtfwd.lf_rev(i)) << endl;
    }
     */

    Bwt Bwtrev(Srev);

    Mstat MS(T,
             Sfwd, Bwtfwd, Bpsfwd,
             Srev, Bwtrev, Bpsrev,
             verbose);

    return MS;
}


int main(int argc, char **argv){
    string T, S, Sbp, Srev, Srevbp;

    if(argc == 2){ // process file
        std::ifstream in_file {argv[1]};
        if(!in_file){
            cout << "could not open file " << argv[1] << endl;
            return 1;
        }

        while (in_file >> T >> S >> Sbp >> Srev >> Srevbp){
            cout << T + " " + S + " ";
            compute_ms(T, S, Sbp, Srev, Srevbp, 0).dump();
        }
    } else {
        string T {"ababbbaabbbaabababbaaaabaabaabbaabaabbabbaabbbababbbaaaaabaabaabbbbaabbbbbbbbaaabaaaaabbbabbaabaaabbabbabaabbaaaababbaabaaaabababbabbbaabbaaaaaaabaaabababbbbabbbaaababbbbabaaaabbabbaabaaabbabababbbbaaababbbaaaababbbaababaaaabbabaaaaabaabaababbaaaabbbabbaaabaabbabbbaabaabbbbaabbaabaabaababaabbbbabbaababaabbabaaabbabaaabababbbbaabbaaabaaaaabaaabbaabbbaaaaabbabbabbbaabbbababbaaaaaababbababbabaabbabbbabaaababaaaabaababaababbbbbabaabbbbbbabbaabbbbbaababbaaaaaaaabaaabaabbabbbababaaababbbaaaaabbbabbbbaaaabaaabaaaaaabaaaaaaabbbbabbbbbaababbbaabaabbbbababbbaabbaaaaaabbbabaaaabaaaaabaaabbbabbbabbbbabaaa"};
        string S {"bbbbbaabaabbbbaaaabaaaababbbaaabbaaabbbbbbbaababbbbbbbabababaabaababbaaaabbbababaabbabbabaabbabaabbbaaaaabaabbaabbaaababaabbbabababaabaabbababbbabaabbbbabaaabbabaabaabbbaabaaabaababbaababbabbbbbbbababbbaaabbabaabaabbabbbbabbaaababaababbaabaaaaaabaaabaabbaababaabbbaaababaabbbbaaaabaaabbaabaaabbbaaababaaaabbbaaaabbbaababaaabbaababbbbbaaaabbabaabaaabbbabbbbbaabbbaaababbaaaabbaabbaabbababbbbabbbababbbbbbbaabbbbaababbaaabbbabaaaaababbbabbabaaaaaabbbbaabbbaaaabbbbbbaabaaaababaababbaababbbaababababbabbbabbabaabababbbbbaaabababbbbbaabbabaaabaabaaabbbbbbabaaabaabaabbaaaaaabababbabaabbaabbaaabababbaabaa"};
        string Sbp {};
        string Srev {"aabaabbababaaabbaabbaababbababaaaaaabbaabaabaaababbbbbbaaabaabaaababbaabbbbbababaaabbbbbababaababbabbbabbabababaabbbabaabbabaababaaaabaabbbbbbaaaabbbaabbbbaaaaaababbabbbabaaaaababbbaaabbabaabbbbaabbbbbbbababbbabbbbababbaabbaabbaaaabbabaaabbbaabbbbbabbbaaabaababbaaaabbbbbabaabbaaababaabbbaaaabbbaaaababaaabbbaaabaabbaaabaaaabbbbaababaaabbbaababaabbaabaaabaaaaaabaabbabaababaaabbabbbbabbaabaababbaaabbbababbbbbbbabbabaabbabaabaaabaabbbaabaababbaaababbbbaababbbababbaabaababababbbaababaaabbaabbaabaaaaabbbaababbaababbabbaabababbbaaaabbabaabaababababbbbbbbabaabbbbbbbaaabbaaabbbabaaaabaaaabbbbaabaabbbbb"};
        string Srevbp {};

        memory_monitor::start();
        compute_ms(T, S, Sbp, Srev, Srevbp, 1).dump();
        memory_monitor::stop();
        cout << memory_monitor::peak() << " bytes." << endl;

        //cout << "usage: " << argv[0] << "<file of strings>" << endl;
        //cout << "or" << endl;
        //cout << "usage: " << argv[0] << "<T> <S>" << endl;
        //return 1;
    }

    return 0;
}

